local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the Frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 400, 0, 300)
Frame.Position = UDim2.new(0.5, -200, 0.5, -150)
Frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui

-- Add UICorner to Frame for rounded corners
local FrameCorner = Instance.new("UICorner")
FrameCorner.CornerRadius = UDim.new(0, 10)
FrameCorner.Parent = Frame

-- Create the TextBox (where you enter Lua code)
local TextBox = Instance.new("TextBox")
TextBox.Size = UDim2.new(0, 380, 0, 200)
TextBox.Position = UDim2.new(0, 10, 0, 10)
TextBox.MultiLine = true
TextBox.ClearTextOnFocus = false
TextBox.Text = "-- Enter your Lua code here"
TextBox.TextWrapped = true
TextBox.TextXAlignment = Enum.TextXAlignment.Left
TextBox.TextYAlignment = Enum.TextYAlignment.Top
TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TextBox.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
TextBox.Font = Enum.Font.Code
TextBox.TextSize = 14
TextBox.Parent = Frame

-- Add UICorner to TextBox for rounded corners
local TextBoxCorner = Instance.new("UICorner")
TextBoxCorner.CornerRadius = UDim.new(0, 10)
TextBoxCorner.Parent = TextBox

-- Create the Execute button
local ExecuteButton = Instance.new("TextButton")
ExecuteButton.Size = UDim2.new(0, 180, 0, 50)
ExecuteButton.Position = UDim2.new(0, 10, 0, 220)
ExecuteButton.Text = "Execute"
ExecuteButton.Font = Enum.Font.GothamBold
ExecuteButton.TextSize = 16
ExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton.BackgroundColor3 = Color3.fromRGB(85, 170, 85)
ExecuteButton.Parent = Frame

-- Add UICorner to Execute button for rounded corners
local ExecuteButtonCorner = Instance.new("UICorner")
ExecuteButtonCorner.CornerRadius = UDim.new(0, 10)
ExecuteButtonCorner.Parent = ExecuteButton

-- Create the Clear button
local ClearButton = Instance.new("TextButton")
ClearButton.Size = UDim2.new(0, 180, 0, 50)
ClearButton.Position = UDim2.new(0, 210, 0, 220)
ClearButton.Text = "Clear"
ClearButton.Font = Enum.Font.GothamBold
ClearButton.TextSize = 16
ClearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearButton.BackgroundColor3 = Color3.fromRGB(170, 85, 85)
ClearButton.Parent = Frame

-- Add UICorner to Clear button for rounded corners
local ClearButtonCorner = Instance.new("UICorner")
ClearButtonCorner.CornerRadius = UDim.new(0, 10)
ClearButtonCorner.Parent = ClearButton

-- Function to execute code when the Execute button is clicked
ExecuteButton.MouseButton1Click:Connect(function()
    local code = TextBox.Text
    local func, err = loadstring(code)
    if func then
        pcall(func)
    else
        warn("Error in code: " .. err)
    end
end)

-- Function to clear the TextBox when the Clear button is clicked
ClearButton.MouseButton1Click:Connect(function()
    TextBox.Text = ""
end)